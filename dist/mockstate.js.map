{"version":3,"sources":["../src/mockstate.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","setState","setActions","subscribe","middleware","unsubscribe","Mockstate","_store","state","actions","components","store","component","handler","push","forEach","el","splice","index","callback","action","args","updateStoreData","updateStoreState","Promise","resolve","apply","concat","then","value","call","i","undefined","data","Object","assign","stateName"],"mappings":"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","file":"mockstate.js","sourcesContent":["; (function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      dispatch: factory().dispatch\n      , getState: factory().getState\n      , setState: factory().setState\n      , setActions: factory().setActions\n      , subscribe: factory().subscribe\n      , middleware: factory().middleware\n      , unsubscribe: factory().unsubscribe\n    }\n  } else {\n    root.Mockstate = factory();\n  }\n} (this, function () {\n  'use strict';\n  /**\n   * @name Mockstate\n   * @description The object that will manage all application state\n   */\n  let Mockstate = {\n    /**\n     * @name _store\n     * @description The private store\n     */\n    _store: {\n      /**\n       * @name state\n       * @description The Store application state\n       */\n      state: {},\n      /**\n       * @name actions\n       * @description The Functions that will change the Store state\n       */\n      actions: {},\n      /**\n       * @name state\n       * @description The Components that was subscribed\n       */\n      components: [],\n      middleware: {}\n    },\n    /**\n     * @name store\n     * @description Public Store\n     */\n    store: {\n      /**\n       * @name subscribe\n       * @description Subscribe to call the handler function when the action will be triggered\n       * @param {Component} component The Component\n       * @param {Function} handler The function that will be called\n       **/\n      subscribe: (component, handler) => {\n        Mockstate._store.components.push({ component, handler });\n      },\n      unsubscribe: (component) => {\n        Mockstate._store.components.forEach(el, index => {\n          if (el === component) {\n            Mockstate._store.components.splice(index, 1);\n          }\n        });\n      },\n      /**\n       * @name middleware\n       * @description The middleware function that will be triggered\n       * every time when an action called.\n       * @param {Function} callback A function that will be called \n       **/\n      middleware: (callback) => {\n        Mockstate._store.middleware = callback;\n      },\n      /**\n       * @name dispatch\n       * @description Dispatch an action to change\n       * the store state\n       * @param { string } action The action name\n       * @param { any } args Arguments sended to the action\n       */\n      dispatch: (action, ...args) => {\n        let state;\n        let updateStoreData = () => {\n          let updateStoreState = Promise.resolve(\n            Mockstate._store.actions[action].apply\n              (\n              null,\n              [].concat(Mockstate._store.state, args)\n              )\n          )\n            .then(value => {\n              state = { action, value }\n              /**\n               * has middleware?\n               **/\n              if (typeof Mockstate._store.middleware === \"function\") {\n                Mockstate._store.middleware.call(null, state, Mockstate._store.state)\n              }\n              let component = Mockstate._store.components\n              component.forEach((el, i) => {\n                if (el.component !== undefined && typeof el.handler === \"function\") {\n                  el.handler(state)\n                }\n              })\n            })\n            .then(() => {\n              return state;\n            });\n          return updateStoreState;\n        };\n        return updateStoreData()\n      },\n      /**\n       * @name setState\n       * @description Sets the application data state\n       * @param {object} data Simple Object that contain the State\n       */\n      setState: (data) => {\n        Object.assign(Mockstate._store.state, data);\n      },\n      /**\n       * @name get\n       * @param {string} stateName The Store state name\n       */\n      getState: (stateName) => {\n        return Mockstate._store.state[stateName];\n      },\n      /**\n       * @name setActions\n       * @description Sets the application Actions\n       * that will change the Store state\n       */\n      setActions: (data) => {\n        Object.assign(Mockstate._store.actions, data);\n      }\n    }\n  };\n  return Mockstate.store;\n}));"]}