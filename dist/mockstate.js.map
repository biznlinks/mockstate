{"version":3,"sources":["../src/mockstate.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","setState","setActions","subscribe","middleware","unsubscribe","Mockstate","localState","recoveryStateWhenOffline","window","addEventListener","localStorage","getItem","mockStoreState","JSON","parse","removeItem","e","recoveredState","setItem","stringify","_store","state","actions","components","store","component","handler","push","forEach","el","splice","index","callback","action","args","updateStoreData","updateStoreState","Promise","resolve","apply","concat","then","value","call","i","undefined","data","Object","assign","stateName"],"mappings":"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","file":"mockstate.js","sourcesContent":["; (function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      dispatch: factory().dispatch\n      , getState: factory().getState\n      , setState: factory().setState\n      , setActions: factory().setActions\n      , subscribe: factory().subscribe\n      , middleware: factory().middleware\n      , unsubscribe: factory().unsubscribe\n    }\n  } else {\n    root.Mockstate = factory();\n  }\n} (this, function () {\n  'use strict';\n  /**\n   * @name Mockstate\n   * @description The object that will manage all application state\n   */\n  let Mockstate = {\n    /**\n     * Persists the store state on localStorage\n     * @name localState\n     */\n    localState: {\n      /**\n       * @name recoveryStateWhenOffline\n       * @description When the user will be offline, keep the store state safe.\n       */\n      recoveryStateWhenOffline: () => {\n        /**\n         * When the page reloads, if the recovery state are present\n         * recovery the store state.\n         */\n        window.addEventListener(\"load\", () => {\n          // verify if the recored state are present when the page loads\n          if (localStorage.getItem('mockstate:StateToRecovery') !== null) {\n            Mockstate.mockStoreState = JSON.parse(localStorage.getItem('mockstate:StateToRecovery'));\n            // remove the temporary recovery state\n            localStorage.removeItem('mockstate:StateToRecovery');\n          };\n        });\n\n        // if the network connection back whithout the user reload the page, \n        // recovery the  state.\n        window.addEventListener('online', (e) => {\n          let recoveredState = JSON.parse(localStorage.getItem('mockstate:StateToRecovery'));\n          Mockstate.mockStoreState = recoveredState;\n\n          // remove the temporary recovery state\n          localStorage.removeItem('mockstate:StateToRecovery');\n        });\n\n        window.addEventListener('offline', (e) => {\n          /**\n           * when the network connection is offline, store the actual\n           * state on localStorage to be recovered when the connection\n           * become without reload the page or when reload in the same route,\n           * keeping the state and UI component safe.\n           */\n          localStorage.setItem('mockstate:StateToRecovery', JSON.stringify(Mockstate.mockStoreState));\n        });\n      }\n    },\n    /**\n     * The copy of initial store state, that will be used to work\n     * in application. Keeping the store state immutable.\n     */\n    mockStoreState: {},\n    /**\n     * @name _store\n     * @description The private store\n     */\n    _store: {\n      /**\n       * @name state\n       * @description The Store application state\n       */\n      state: {},\n      /**\n       * @name actions\n       * @description The Functions that will change the Store state\n       */\n      actions: {},\n      /**\n       * @name state\n       * @description The Components that was subscribed\n       */\n      components: [],\n      middleware: {}\n    },\n    /**\n     * @name store\n     * @description Public Store\n     */\n    store: {\n      /**\n       * @name subscribe\n       * @description Subscribe to call the handler function when the action will be triggered\n       * @param {Component} component The Component\n       * @param {Function} handler The function that will be called\n       **/\n      subscribe: (component, handler) => {\n        Mockstate._store.components.push({ component, handler });\n      },\n      unsubscribe: (component) => {\n        let components = Mockstate._store.components;\n        components.forEach(el, index => {\n          if (el === component) {\n            components.splice(index, 1);\n          }\n        });\n      },\n      /**\n       * @name middleware\n       * @description The middleware function that will be triggered\n       * every time when an action called.\n       * @param {Function} callback A function that will be called \n       **/\n      middleware: (callback) => {\n        Mockstate._store.middleware = callback;\n      },\n      /**\n       * @name dispatch\n       * @description Dispatch an action to change\n       * the store state\n       * @param { string } action The action name\n       * @param { any } args Arguments sended to the action\n       */\n      dispatch: (action, ...args) => {\n        let state;\n        let updateStoreData = () => {\n          let updateStoreState = Promise.resolve(\n            Mockstate._store.actions[action].apply\n              (\n              null, [].concat(Mockstate.mockStoreState, args)\n              )\n          )\n            .then(value => {\n              let middleware = Mockstate._store.middleware\n                , component = Mockstate._store.components\n                ;\n\n              // state that will be returned\n              let state = { action, value }\n\n              /**\n               * has middleware?\n               **/\n              if (typeof middleware === \"function\") {\n                middleware.call(null, state, Mockstate.mockStoreState);\n              }\n\n              component.forEach((el, i) => {\n                if (el.component !== undefined && typeof el.handler === \"function\") {\n                  el.handler(state)\n                }\n              });\n              return state;\n            });\n          return updateStoreState;\n        };\n        return updateStoreData()\n      },\n      /**\n       * @name setState\n       * @description Sets the application data state\n       * @param {object} data Simple Object that contain the State\n       */\n      setState: (data) => {\n        // setting the immutable initial state\n        Object.assign(Mockstate._store.state, data);\n        Object.assign(Mockstate.mockStoreState, data);\n        Mockstate.localState.recoveryStateWhenOffline();\n      },\n      /**\n       * @name get\n       * @param {string} stateName The Store state name\n       */\n      getState: (stateName) => {\n        if (stateName === '*') {\n          return Mockstate.mockStoreState;\n        }\n        return Mockstate.mockStoreState[stateName];\n      },\n      /**\n       * @name setActions\n       * @description Sets the application Actions\n       * that will change the Store state\n       */\n      setActions: (data) => {\n        Object.assign(Mockstate._store.actions, data);\n      }\n    }\n  };\n  return Mockstate.store;\n}));"]}