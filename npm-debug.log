0 info it worked if it ends with ok
1 verbose cli [ '/home/ubuntu/.nvm/versions/node/v4.5.0/bin/node',
1 verbose cli   '/home/ubuntu/.nvm/versions/node/v4.5.0/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@2.15.9
3 info using node@v4.5.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/ubuntu/workspace/state',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/ubuntu/.npm/mockstate/0.0.1/package.tgz not in flight; packing
9 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/home/ubuntu/.npm/mockstate/0.0.1/package.tgz',
10 verbose tar pack   '/home/ubuntu/workspace/state' ]
11 verbose tarball /home/ubuntu/.npm/mockstate/0.0.1/package.tgz
12 verbose folder /home/ubuntu/workspace/state
13 info prepublish mockstate@0.0.1
14 verbose addLocalTarball adding from inside cache /home/ubuntu/.npm/mockstate/0.0.1/package.tgz
15 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd mockstate@0.0.1
17 verbose afterAdd /home/ubuntu/.npm/mockstate/0.0.1/package/package.json not in flight; writing
18 verbose correctMkdir /home/ubuntu/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /home/ubuntu/.npm/mockstate/0.0.1/package/package.json written
20 silly publish { name: 'mockstate',
20 silly publish   version: '0.0.1',
20 silly publish   description: 'A centralized state management for Javascript applications, made easy.',
20 silly publish   main: 'dist/state.min.js',
20 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
20 silly publish   repository:
20 silly publish    { type: 'git',
20 silly publish      url: 'git+https://github.com/luisvinicius167/state.git' },
20 silly publish   keywords:
20 silly publish    [ 'react',
20 silly publish      'redux',
20 silly publish      'flux',
20 silly publish      'easy state',
20 silly publish      'state container',
20 silly publish      'flux pattern' ],
20 silly publish   author: { name: 'Luis Vinícius', email: 'dev_luis@hotmail.com' },
20 silly publish   license: 'MIT',
20 silly publish   bugs: { url: 'https://github.com/luisvinicius167/state/issues' },
20 silly publish   homepage: 'https://github.com/luisvinicius167/state#readme',
20 silly publish   readme: '<img with="100" height="100" src="https://github.com/luisvinicius167/state/blob/master/img/state-logo.png?raw=true"/> \n<h3 color="#333">mockState</h3>\n A centralized state management for Javascript applications, made easy. <br/>\n\n### :information_desk_person: Demo Project here [Preact.js + State ➞](http://state-preact.surge.sh/)<br/>\n[![npm package](https://img.shields.io/badge/npm-0.0.1-blue.svg)](https://www.npmjs.com/package/state)\n\n### Install\n* Npm: ``` npm install mockstate ```\n* Bower: ``` bower install mockstate ```\n\n### :star: Why you should be using mockState?\n * It\'s pure flux, the flow is unidirectional.\n * Reactive state.\n * Very simple to Get Started.\n * Easy API.\n * Actively maintained and being used in production.\n \n### :raised_hands: Very simple to use.\n > Dispatch actions ➞ Do something  ➞ Receive the result of your action\n\n\n### What does it look like?\n\nDispatch\n * Trigger some action for change the state. A Promise will be returned, that contain an Object with the keys ``action`` and ``value`` of your correspondent action response.\n```javascript\n/**\n * @name dispatch\n * @description Trigger some action for change the state.\n * @param {string} actionName The action name\n * @param { any } args Other Arguments\n * @return {Promise} Return a Promise with an Object that contain the stateValue and action. \n * {stateValue, action} = data;\n */\n\n// On your component\nimport {dispatch} from \'state\';\n\ndispatch(\'increment\', 1)\n  .then( ( data ) => {\n    console.log(\'The state was changed.\');\n    // this.setState({count: data.stateValue});\n  })\n```\n\nActions\n * Set your actions functions. Your action functions always needs to return a Promise and receive the state as first argument.\n```javascript\n/**\n * @name setActions\n * @description Set the actions functions.\n * @param {object} state The Store State as first argument\n * @param { any } args Other Arguments\n */\n \n// actions/index.js\nimport {setActions} from \'state\';\n\nsetActions({\n  // each function receive the state as first argument\n  increment: (state, n) => {\n    //Always return Promise.\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let result = state.count += n;\n        resolve(result)\n      }, 2000)\n    });\n  }\n});\n```\n\nStore State\n * Set the application Store state\n```javascript\n/**\n * @name setState\n * @description Set you application store state\n * @param {object} state Your application state data\n */\n \n// store/index.js\nimport {setState} from \'state\';\n\nsetState({\n  count: 1\n});\n```\n\nGetting the Store State\n * Get a state value of your store\n```javascript\n/**\n * @name getState\n * @description Get the state value\n * @param {string} stateName The state name\n */\n \n// store/index.js\nimport {getState} from \'state\';\n\nlet count = getState(\'count\');\n```\n\nMiddleware\n * Set a middleware function, that will be triggered after the action changed the state.\n```javascript\n/**\n * @name middleware\n * @description Get the state value\n * @param {Function} callback The callback that will be triggered and\n * receives the data of your action and the all state of your store application.\n */\n \n// state/index.js\nimport { middleware } from \'state\';\n\nmiddleware( (data, state) => {\n    console.log(\'After action triggers:\', data, \' and the Store State is: \', state);\n})\n```\n\nSubscribe/Unsubscribe\n * Subscribe some component for trigger the handler function when some state was changed. \n * Unsubscribe when you don\'t wnat to trigger the handler function.\n```javascript\n/**\n * @name subscribe\n * @description Subscribe some component for trigger the handler function when some state was changed.\n * @param { any } component Your component.\n * @param { handler } handler Your function that will be triggered when some state change.\n */\n \n// components/app/index.js\nimport {subscribe, unsubscribe, getState} from \'state\';\n  \n  componentWillMount(){\n     // when some state change, do something.\n     subscribe(this, ( data ) => {\n       // this.forceUpdate();\n       this.setState({count: getState(\'count\')})\n     });\n  }\n  \n    componentWillUnmount(){\n      // remove this component for observe the changes on the state\n      unsubscribe(this)\n    }\n```\n\n#### License\nMIT License.\n',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   gitHead: '605527995ef2231cb6f74043988c7b4dffc483bd',
20 silly publish   _id: 'mockstate@0.0.1',
20 silly publish   _shasum: 'db7fee8ecb5d901bc0c91734df81178715b33c62',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name mockstate
23 silly mapToRegistry using default registry
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'mockstate',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'mockstate',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/mockstate
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /home/ubuntu/.npm/mockstate/0.0.1/package.tgz
29 verbose request uri https://registry.npmjs.org/mockstate
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 2:46:37 PM
32 verbose request using bearer token for auth
33 verbose request id 27f239831df63e9c
34 http request PUT https://registry.npmjs.org/mockstate
35 http 403 https://registry.npmjs.org/mockstate
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Wed, 19 Oct 2016 14:46:38 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-ord1729-ORD',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1476888397.744896,VS0,VE1109',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /home/ubuntu/.npm/registry.npmjs.org/mockstate on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 0.0.1." : mockstate
39 verbose stack     at makeError (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/request/request.js:200:22)
39 verbose stack     at emitTwo (events.js:87:13)
39 verbose stack     at Request.emit (events.js:172:7)
39 verbose stack     at Request.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/request/request.js:1067:10)
39 verbose stack     at emitOne (events.js:82:20)
39 verbose stack     at Request.emit (events.js:169:7)
39 verbose stack     at IncomingMessage.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/npm/node_modules/request/request.js:988:12)
40 verbose statusCode 403
41 verbose pkgid mockstate
42 verbose cwd /home/ubuntu/workspace/state
43 error Linux 4.2.0-c9
44 error argv "/home/ubuntu/.nvm/versions/node/v4.5.0/bin/node" "/home/ubuntu/.nvm/versions/node/v4.5.0/bin/npm" "publish"
45 error node v4.5.0
46 error npm  v2.15.9
47 error code E403
48 error "You cannot publish over the previously published version 0.0.1." : mockstate
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
